// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	FXAAShader.usf : Postprocess Anti aliasing based on FXAA code from NVIDIA
=============================================================================*/

#include "Common.ush"
#include "PostProcessCommon.ush"
#include "DeferredShadingCommon.ush"

/*-----------------------------------------------------------------------------
	FXAA vertex shader
-----------------------------------------------------------------------------*/
void PPCartoonVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 InTexCoord : ATTRIBUTE1,
	out noperspective float4 OutTexCoord : TEXCOORD0,
	out float4 OutPosition : SV_POSITION
	)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutTexCoord.xy);
	OutTexCoord.zw = OutPosition.xy;
}




/*-----------------------------------------------------------------------------
	FXAA pixel shader
-----------------------------------------------------------------------------*/
#if PIXELSHADER
	float DepthEdgeForUV(float2 UV) {
		return Texture2DSample(PostprocessInput1, PostprocessInput1Sampler, UV).r;
	}

	float3 NormalEdgeForUV(float2 UV) {
		// GBufferA.rgb = WorldNormal of that pixel
		float4 GBufferA = Texture2DSampleLevel(SceneTexturesStruct.GBufferATexture, SceneTexturesStruct.GBufferATextureSampler, UV, 0);
		float3 normal = GBufferA.xyz;
		normal = DecodeNormal(GBufferA.xyz);
		normal = normalize(normal);
		return normal;
	}

	float CalculateDepthLine(float2 UV) {
		float gy = (
						DepthEdgeForUV(UV + float2(-PostprocessInput1Size.z, -PostprocessInput1Size.w)) +
						2 * DepthEdgeForUV(UV + float2(0, -PostprocessInput1Size.w)) +
						DepthEdgeForUV(UV + float2(PostprocessInput1Size.z, -PostprocessInput1Size.w))
					) -
					(
						DepthEdgeForUV(UV + float2(-PostprocessInput1Size.z, PostprocessInput1Size.w)) +
						2 * DepthEdgeForUV(UV + float2(0, +PostprocessInput1Size.w)) +
						DepthEdgeForUV(UV + float2(PostprocessInput1Size.z, +PostprocessInput1Size.w))
					);


		float gx = (
						DepthEdgeForUV(UV + float2(-PostprocessInput1Size.z, -PostprocessInput1Size.w)) +
						2 * DepthEdgeForUV(UV + float2(-PostprocessInput1Size.z, 0)) +
						DepthEdgeForUV(UV + float2(-PostprocessInput1Size.z, PostprocessInput1Size.w))
					) -
					(
						DepthEdgeForUV(UV + float2(PostprocessInput1Size.z, -PostprocessInput1Size.w)) +
						2 * DepthEdgeForUV(UV + float2(PostprocessInput1Size.z, 0)) +
						DepthEdgeForUV(UV + float2(PostprocessInput1Size.z, PostprocessInput1Size.w))
					);

		return sqrt(gx * gx + gy * gy);
	}

	float CalculateNormalLine(float2 UV) {
		float3 y_vec = (
						NormalEdgeForUV(UV + float2(-PostprocessInput1Size.z, -PostprocessInput1Size.w)) +
						2 * NormalEdgeForUV(UV + float2(0, -PostprocessInput1Size.w)) +
						NormalEdgeForUV(UV + float2(PostprocessInput1Size.z, -PostprocessInput1Size.w))
					) -
					(
						NormalEdgeForUV(UV + float2(-PostprocessInput1Size.z, PostprocessInput1Size.w)) +
						2 * NormalEdgeForUV(UV + float2(0, PostprocessInput1Size.w)) +
						NormalEdgeForUV(UV + float2(PostprocessInput1Size.z, PostprocessInput1Size.w))
					);


		float3 x_vec = (
						NormalEdgeForUV(UV + float2(-PostprocessInput1Size.z, -PostprocessInput1Size.w)) +
						2 * NormalEdgeForUV(UV + float2(-PostprocessInput1Size.z, 0)) +
						NormalEdgeForUV(UV + float2(-PostprocessInput1Size.z, PostprocessInput1Size.w))
					) -
					(
						NormalEdgeForUV(UV + float2(PostprocessInput1Size.z, -PostprocessInput1Size.w)) +
						2 * NormalEdgeForUV(UV + float2(PostprocessInput1Size.z, 0)) +
						NormalEdgeForUV(UV + float2(PostprocessInput1Size.z, +PostprocessInput1Size.w))
					);

		float gx = length(x_vec);
		float gy = length (y_vec);

		return sqrt(gx * gx + gy * gy);
	}

	void PPCartoonPS(
		in noperspective float4 UVAndScreenPos: TEXCOORD0,
		out float4 OutColor : SV_Target0
	)
	{
		float2 UV = UVAndScreenPos.xy;
		float4 SceneSample = Texture2DSample(PostprocessInput0, PostprocessInput0Sampler, UV);
		float4 OutlineColor = float4(0, 0, 0, 1);
		float CurrentDepth = Texture2DSample(PostprocessInput1, PostprocessInput1Sampler, UV).x;


		float DepthEdge = CalculateDepthLine(UV);

		float NormalEdge = CalculateNormalLine(UV);

		float Edge = max(DepthEdge, NormalEdge);

		Edge = clamp(Edge, 0, 1);

		float DistanceUnits = CurrentDepth / 1e+05;

		// Cel Shading
		float3 ycog = RGBToYCoCg(SceneSample.rgb);

		float Luminance = ycog.x;

		float NewLuminance = round(Luminance * 15) / 15;

		ycog.x = NewLuminance;

		float3 ConvertedColor = YCoCgToRGB(ycog);

		float4 CelColor = float4(ConvertedColor, SceneSample.w);

		if (DepthEdge > 0.5) {
			OutColor = lerp(CelColor, OutlineColor, DepthEdge);
			return;
		}
		else if (NormalEdge > 2.5) {
			OutColor = lerp(CelColor, OutlineColor, NormalEdge);
			return;
		}
		else {
			OutColor = CelColor;
		}
	}

#endif // PIXELSHADER
