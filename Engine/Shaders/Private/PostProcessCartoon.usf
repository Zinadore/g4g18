// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	FXAAShader.usf : Postprocess Anti aliasing based on FXAA code from NVIDIA
=============================================================================*/

#include "Common.ush"
#include "PostProcessCommon.ush"
#include "DeferredShadingCommon.ush"

/*-----------------------------------------------------------------------------
	FXAA vertex shader
-----------------------------------------------------------------------------*/
void PPCartoonVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 InTexCoord : ATTRIBUTE1,
	out noperspective float4 OutTexCoord : TEXCOORD0,
	out float4 OutPosition : SV_POSITION
	)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutTexCoord.xy);
	OutTexCoord.zw = OutPosition.xy;
}


float EdgeForSide(float4 CurrentSample, float2 SampleUV) {
	return Texture2DSample(PostprocessInput1, PostprocessInput1Sampler, SampleUV).r;
}

/*-----------------------------------------------------------------------------
	FXAA pixel shader
-----------------------------------------------------------------------------*/
#if PIXELSHADER

	void PPCartoonPS(
		in noperspective float4 UVAndScreenPos: TEXCOORD0,
		out float4 OutColor : SV_Target0
	)
	{
		float2 UV = UVAndScreenPos.xy;

		// FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(UV, false);
		// FGBufferData GBuffer = ScreenSpaceData.GBuffer;
		float currentSample = Texture2DSample(PostprocessInput1, PostprocessInput1Sampler, UV).r;

		// Right pixel
		float rightSample = EdgeForSide(currentSample, UV + float2(PostprocessInput1Size.z, 0));

		// Left pixel
		float leftSample = EdgeForSide(currentSample, UV + float2(-PostprocessInput1Size.z, 0));

		// Top pixel
		float topSample = EdgeForSide(currentSample, UV + float2(0, -PostprocessInput1Size.w));

		// Bottom pixel
		float bottomSample = EdgeForSide(currentSample, UV + float2(0, PostprocessInput1Size.w));

		float rightEdge = currentSample - rightSample;
		float leftEdge = currentSample - leftSample;
		float topEdge = currentSample - topSample;
		float bottomEdge = currentSample - bottomSample;


		OutColor = float4(rightEdge, rightEdge, rightEdge, 1) +
				   float4(leftEdge, leftEdge, leftEdge, 1) +
				   float4(topEdge, topEdge, topEdge, 1) +
				   float4(bottomEdge, bottomEdge, bottomEdge, 1);

	}

#endif // PIXELSHADER
